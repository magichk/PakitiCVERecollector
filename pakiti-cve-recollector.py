#Librerias necesarias para poder acceder a la URL 
import cookielib
import urllib
import urllib2


print " ____       _    _ _   _    ______     _______ "
print "|  _ \ __ _| | _(_) |_(_)  / ___\ \   / / ____|"
print "| |_) / _` | |/ / | __| | | |    \ \ / /|  _|  "
print "|  __/ (_| |   <| | |_| | | |___  \ V / | |___ "
print "|_|   \__,_|_|\_\_|\__|_|  \____|  \_/  |_____|"
print " "                                               
print " ____                _ _           _             "
print "|  _ \ ___  ___ ___ | | | ___  ___| |_ ___  _ __ "
print "| |_) / _ \/ __/ _ \| | |/ _ \/ __| __/ _ \| '__|"
print "|  _ <  __/ (_| (_) | | |  __/ (__| || (_) | |   "
print "|_| \_\___|\___\___/|_|_|\___|\___|\__\___/|_|   "
print " "
print "                                     @by magichk "                                               

#Creem la estructura inicial del fitxer XML
newcve = '<?xml version="1.0"?>\n'
newcve = newcve + '<oval_definitions \n'
newcve = newcve + '    xmlns="http://oval.mitre.org/XMLSchema/oval-definitions-5" \n'
newcve = newcve + '    xmlns:ind-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#independent" \n'
newcve = newcve + '    xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" \n'
newcve = newcve + '    xmlns:unix-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix" \n'
newcve = newcve + '    xmlns:linux-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux" \n'
newcve = newcve + '    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd   http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd   http://oval.mitre.org/XMLSchema/oval-definitions-5#independent independent-definitions-schema.xsd   http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd   http://oval.mitre.org/XMLSchema/oval-definitions-5#macos linux-definitions-schema.xsd">\n'
newcve = newcve + '<generator>\n'
newcve = newcve + '<oval:product_name>CSUC CVE Generator</oval:product_name>\n'
newcve = newcve + '<oval:product_version>1.0</oval:product_version>\n'
newcve = newcve + '<oval:schema_version>1.0</oval:schema_version>\n'
newcve = newcve + '<oval:timestamp>2019-08-03T09:29:30</oval:timestamp>\n'
newcve = newcve + '</generator>\n'
#Potser cal afegir la part d'inventory?? de moment no esta afegida. 

#Afegir al fitxer ja les capcaleres.
f = open("oval.xml", "w")
f.write(newcve)
f.close()

#Reset variable newcve.
newcve=""

#Creamos las cookies para guardar la session y en la segunda peticion usar la cookie de sesion. Ponemos headers fake emulando un navegador
cookies = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies))
urllib2.install_opener(opener)
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.0; en-GB; rv:1.8.1.12) Gecko/20080201 Firefox/2.0.0.12',
    'Accept': 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',
    'Accept-Language': 'en-gb,en;q=0.5',
    'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
}

# Descargamos la web y le pasamos los headers creados  anteriormente.


url = "https://nvd.nist.gov/"
pag_principal = urllib2.urlopen(urllib2.Request(url, None, headers))
paquet = ""
versio = ""
for line in pag_principal:
    inicio = line.find('<a href="/vuln/detail/CVE')
    if (inicio != -1):
        inicio = line.find("\"", inicio)
        inicio = inicio + 1
        fin = line.find("\"", inicio)
        if (fin != -1):
            url = "https://nvd.nist.gov" + line[inicio:fin]
            print url
            #print url
            todo_html = urllib2.urlopen(urllib2.Request(url, None, headers))
            #Flag per saber si el CVE analitzat es critic i cal registrar-lo.
            flag=0
            count=1

            #Crawleamos manualmente la etiqueta h3 que contiene el string que necesitamos convertir a md5.
            for linea in todo_html:
                #Buscar el numero de CVE
                inicio = linea.find('<span data-testid="page-header-vuln-id">')
                if (inicio != -1):
                    inicio = linea.find(">",inicio)
                    inicio = inicio + 1
                    fin = linea.find("</", inicio)
                    if (fin != -1):
                        cve = linea[inicio:fin]
                        number = cve
                        number = number.replace("CVE","")
                        number = number.replace("-","")

                #Buscar la descripcio
                inicio = linea.find('<p data-testid="vuln-description">')
                if (inicio != -1):
                    inicio = linea.find(">", inicio)
                    inicio = inicio + 1
                    fin = linea.find("</", inicio)
                    if (fin != -1):
                        descripcio = linea[inicio:fin]
                        #print descripcio

                #Critical?
                inicio = linea.find('<span data-testid="vuln-cvssv3-base-score-severity">')
                if (inicio != -1):
                    inicio = linea.find(">", inicio)
                    inicio = inicio + 1
                    fin = linea.find("</", inicio)
                if (fin != -1):
                    criticitat = linea[inicio:fin]
                    if (criticitat == "CRITICAL") or (criticitat == "HIGH") :
                        print "CVE que s'ha d'afegir:"
                        print "URL: " + url
                        print "CVE: " + cve
                        print "Descripcio: " + descripcio
                        print "Criticitat: "  + criticitat 
                        print "\n"
                        flag = 1

                #Hi ha una url del propietari que hagi reportat l'incident?
                inicio = linea.find('vuln-hyperlinks-link')
                if (inicio != -1):
                    inicio = linea.find("http", inicio)
                    if (inicio != -1):
                        fin = linea.find("\"", inicio)
                        if (fin != -1):
                            link = linea[inicio:fin]
                
                inicio = linea.find('Vendor Advisory')
                if (inicio != -1):
                    if (link != ""):
                        confirmacio = link 
                else:
                    confirmacio = ""


                #Quin paquet esta afectat?
                inicio = linea.find('cpe:')
                if (inicio != -1):
                    inicio = linea.find("a:", inicio)
                    if (inicio != -1):
                        inicio = inicio + 2
                        fin = linea.find(":", inicio)
                        if (fin != -1):
                            paquet = linea[inicio:fin]

                #Quina versio esta afectada?
                inicio = linea.find('versions')
                if (inicio != -1):
                    fin = linea.find("</", inicio)
                    if (fin != -1):
                        versio = linea[inicio:fin]


                #Afegir al fitxer si el CVE es critic.
                if (flag == 1):
                    newcve = newcve + '<definitions>\n'
                    newcve = newcve + '<definition class="vulnerability" id="oval:csuc.cat:def:'+str(number)+'" version="1">\n'
                    newcve = newcve + '<metadata>\n'
                    newcve = newcve + '<title>'+cve+'</title>\n'
                    newcve = newcve + '<description/>\n'
                    newcve = newcve + descripcio + '\n'
                    newcve = newcve + '<description/>\n'
                    newcve = newcve + '<affected family="unix">\n'
                    newcve = newcve + '<platform></platform>\n'
                    newcve = newcve + '</affected>\n'
                    newcve = newcve + '<reference source="CVE" ref_id="'+cve+'" ref_url="'+url+'"/>\n'
                    newcve = newcve + '<advisory>\n'
                    newcve = newcve + '<severity>'+criticitat+'</severity>\n'
                    newcve = newcve + '<rights>Copyright (C) 2019 CSUC </rights>\n'
                    newcve = newcve + '<public_date>2019-01-01</public_date>\n'
                    newcve = newcve + '<bug>'+confirmacio+'</bug>\n'
                    newcve = newcve + '<ref>'+confirmacio+'</ref>\n'
                    newcve = newcve + '</advisory>\n'
                    newcve = newcve + '</metadata>\n'
                    newcve = newcve + '<criteria comment="Release section" operator="AND">\n'
                    newcve = newcve + '<criterion comment="Debian 10 is installed" test_ref="oval:org.debian.oval:tst:1"/>\n'
                    newcve = newcve + '<criteria comment="Architecture section" operator="OR">\n'
                    newcve = newcve + '<criteria comment="Architecture independent section" operator="AND">\n'
                    newcve = newcve + '<criterion comment="all architecture" test_ref="oval:org.debian.oval:tst:2"/>'
                    newcve = newcve + '<criterion comment="'+paquet+' DPKG '+versio+'" test_ref="oval:org.debian.oval:tst:i'+str(count)+'"/>\n'
                    newcve = newcve + '</criteria>\n'
                    newcve = newcve + '</criteria>\n'
                    newcve = newcve + '</criteria>\n'
                    newcve = newcve + '<oval:notes>\n'
                    newcve = newcve + 'NOTES\n'
                    newcve = newcve + '</oval:notes>\n'
                    newcve = newcve + '</definition>\n'
                    newcve = newcve + '</definitions>\n'
                    #print newcve

                    #Afegir aquest CVE al fitxer.
                    f = open("oval.xml", "a")
                    f.write(newcve)
                    f.close()
                    #Reset variable newcve
                    newcve = ""
                    count = count + 1

                    
#Afegir el final del fitxer per tancar el XML.
newcve = "" 
newcve = newcve + '</oval_definitions>'

f = open("oval.xml", "a")
f.write(newcve)
f.close()

